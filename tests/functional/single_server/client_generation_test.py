import os

import pytest

import zero.error
from zero.generate_client import generate_client_code_and_save

from . import server


def test_codegeneration():
    generate_client_code_and_save(server.HOST, server.PORT, ".", overwrite_dir=True)
    assert os.path.isfile("rpc_client.py")

    with open("rpc_client.py", encoding="utf-8") as fp:
        code = fp.read()
        assert (
            code
            == """# Generated by Zero
# import types as per needed

from zero import ZeroClient


zero_client = ZeroClient("localhost", 5559)


class RpcClient:
    def __init__(self, zero_client: ZeroClient):
        self._zero_client = zero_client

    def sleep(self, msec: int) -> str:
        return self._zero_client.call("sleep", msec)

    def sleep_async(self, msec: int) -> str:
        return self._zero_client.call("sleep_async", msec)

    def error(self, msg: str) -> str:
        return self._zero_client.call("error", msg)

    def msgspec_struct(self, start: datetime.datetime) -> Message:
        return self._zero_client.call("msgspec_struct", start)

    def echo(self, msg: str) -> str:
        return self._zero_client.call("echo", msg)

    def hello_world(self) -> str:
        return self._zero_client.call("hello_world", None)

    def decode_jwt(self, msg: str) -> str:
        return self._zero_client.call("decode_jwt", msg)

    def sum_list(self, msg: typing.List[int]) -> int:
        return self._zero_client.call("sum_list", msg)

    def echo_dict(self, msg: typing.Dict[int, str]) -> typing.Dict[int, str]:
        return self._zero_client.call("echo_dict", msg)

    def echo_tuple(self, msg: typing.Tuple[int, str]) -> typing.Tuple[int, str]:
        return self._zero_client.call("echo_tuple", msg)

    def echo_union(self, msg: typing.Union[int, str]) -> typing.Union[int, str]:
        return self._zero_client.call("echo_union", msg)

    def divide(self, msg: typing.Tuple[int, int]) -> int:
        return self._zero_client.call("divide", msg)
"""
        )

    os.remove("rpc_client.py")


def test_connection_fail_in_code_generation():
    with pytest.raises(zero.error.ConnectionException):
        generate_client_code_and_save(server.HOST, 5558, ".", overwrite_dir=True)
    assert os.path.isfile("rpc_client.py") is False


def test_generate_code_in_different_directory():
    generate_client_code_and_save(
        server.HOST, server.PORT, "./test_codegen", overwrite_dir=True
    )
    assert os.path.isfile("./test_codegen/rpc_client.py")

    os.remove("./test_codegen/rpc_client.py")
    os.rmdir("./test_codegen")


def test_overwrite_dir_false(monkeypatch):
    generate_client_code_and_save(
        server.HOST, server.PORT, "./test_codegen", overwrite_dir=True
    )
    file_hash = hash(open("./test_codegen/rpc_client.py", encoding="utf-8").read())

    monkeypatch.setattr("builtins.input", lambda _: "N")
    generate_client_code_and_save(
        server.HOST, server.PORT, "./test_codegen", overwrite_dir=False
    )
    assert file_hash == hash(
        open("./test_codegen/rpc_client.py", encoding="utf-8").read()
    )

    os.remove("./test_codegen/rpc_client.py")
    os.rmdir("./test_codegen")
